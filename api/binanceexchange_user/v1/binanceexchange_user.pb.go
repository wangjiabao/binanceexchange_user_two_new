// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: api/binanceexchange_user/v1/binanceexchange_user.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Play    int64  `protobuf:"varint,4,opt,name=play,proto3" json:"play,omitempty"`
	Status  int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Amount  int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Balance string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *GetUserReply) Reset() {
	*x = GetUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReply) ProtoMessage() {}

func (x *GetUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReply.ProtoReflect.Descriptor instead.
func (*GetUserReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserReply) GetPlay() int64 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *GetUserReply) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetUserReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type PullUserDepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserDepositRequest) Reset() {
	*x = PullUserDepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserDepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserDepositRequest) ProtoMessage() {}

func (x *PullUserDepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserDepositRequest.ProtoReflect.Descriptor instead.
func (*PullUserDepositRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{2}
}

type PullUserDepositReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserDepositReply) Reset() {
	*x = PullUserDepositReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserDepositReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserDepositReply) ProtoMessage() {}

func (x *PullUserDepositReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserDepositReply.ProtoReflect.Descriptor instead.
func (*PullUserDepositReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{3}
}

type PullUserCredentialsBscRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserCredentialsBscRequest) Reset() {
	*x = PullUserCredentialsBscRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserCredentialsBscRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserCredentialsBscRequest) ProtoMessage() {}

func (x *PullUserCredentialsBscRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserCredentialsBscRequest.ProtoReflect.Descriptor instead.
func (*PullUserCredentialsBscRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{4}
}

type PullUserCredentialsBscReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserCredentialsBscReply) Reset() {
	*x = PullUserCredentialsBscReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserCredentialsBscReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserCredentialsBscReply) ProtoMessage() {}

func (x *PullUserCredentialsBscReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserCredentialsBscReply.ProtoReflect.Descriptor instead.
func (*PullUserCredentialsBscReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{5}
}

type BindTraderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindTraderRequest) Reset() {
	*x = BindTraderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindTraderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindTraderRequest) ProtoMessage() {}

func (x *BindTraderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindTraderRequest.ProtoReflect.Descriptor instead.
func (*BindTraderRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{6}
}

type BindTraderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindTraderReply) Reset() {
	*x = BindTraderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindTraderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindTraderReply) ProtoMessage() {}

func (x *BindTraderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindTraderReply.ProtoReflect.Descriptor instead.
func (*BindTraderReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{7}
}

type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{8}
}

type AnalyzeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeReply) Reset() {
	*x = AnalyzeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeReply) ProtoMessage() {}

func (x *AnalyzeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeReply.ProtoReflect.Descriptor instead.
func (*AnalyzeReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{9}
}

type OrderHandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderHandleRequest) Reset() {
	*x = OrderHandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHandleRequest) ProtoMessage() {}

func (x *OrderHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHandleRequest.ProtoReflect.Descriptor instead.
func (*OrderHandleRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{10}
}

type OrderHandleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderHandleReply) Reset() {
	*x = OrderHandleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHandleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHandleReply) ProtoMessage() {}

func (x *OrderHandleReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHandleReply.ProtoReflect.Descriptor instead.
func (*OrderHandleReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{11}
}

type ListenTraderAndUserOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *ListenTraderAndUserOrderRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest) Reset() {
	*x = ListenTraderAndUserOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{12}
}

func (x *ListenTraderAndUserOrderRequest) GetSendBody() *ListenTraderAndUserOrderRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type ListenTraderAndUserOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListenTraderAndUserOrderReply) Reset() {
	*x = ListenTraderAndUserOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderReply) ProtoMessage() {}

func (x *ListenTraderAndUserOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderReply.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{13}
}

func (x *ListenTraderAndUserOrderReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListenTraderAndUserOrderRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders []*ListenTraderAndUserOrderRequest_SendBody_Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest_SendBody) Reset() {
	*x = ListenTraderAndUserOrderRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest_SendBody) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest_SendBody.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ListenTraderAndUserOrderRequest_SendBody) GetOrders() []*ListenTraderAndUserOrderRequest_SendBody_Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type ListenTraderAndUserOrderRequest_SendBody_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint64                                                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BaseMoney string                                                 `protobuf:"bytes,2,opt,name=base_money,json=baseMoney,proto3" json:"base_money,omitempty"`
	Data      []*ListenTraderAndUserOrderRequest_SendBody_Order_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) Reset() {
	*x = ListenTraderAndUserOrderRequest_SendBody_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest_SendBody_Order) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest_SendBody_Order.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest_SendBody_Order) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetBaseMoney() string {
	if x != nil {
		return x.BaseMoney
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetData() []*ListenTraderAndUserOrderRequest_SendBody_Order_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListenTraderAndUserOrderRequest_SendBody_Order_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order 消息类型的字段
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Price  string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Side   string `protobuf:"bytes,4,opt,name=side,proto3" json:"side,omitempty"`
	Qty    string `protobuf:"bytes,5,opt,name=qty,proto3" json:"qty,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) Reset() {
	*x = ListenTraderAndUserOrderRequest_SendBody_Order_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest_SendBody_Order_Data) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest_SendBody_Order_Data.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest_SendBody_Order_Data) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{12, 0, 0, 0}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

var File_api_binanceexchange_user_v1_binanceexchange_user_proto protoreflect.FileDescriptor

var file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc = []byte{
	0x0a, 0x36, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x6c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x18, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x75,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb4, 0x03, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x1a, 0xc8, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x47, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x6e, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x22, 0x37, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xaf, 0x07, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x76, 0x0a,
	0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x17, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x32, 0x12, 0x17, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x32,
	0x12, 0x93, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x12, 0x1e, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x50, 0x75,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x6c,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x5f, 0x62, 0x73, 0x63, 0x12, 0x61, 0x0a, 0x0a, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x69,
	0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9f, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b,
	0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x11, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x54, 0x0a, 0x07, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x0f, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x42, 0x4b, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x2e,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x50, 0x01,
	0x5a, 0x33, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescOnce sync.Once
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData = file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc
)

func file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP() []byte {
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescOnce.Do(func() {
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData)
	})
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData
}

var file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_api_binanceexchange_user_v1_binanceexchange_user_proto_goTypes = []interface{}{
	(*GetUserRequest)(nil),                                      // 0: GetUserRequest
	(*GetUserReply)(nil),                                        // 1: GetUserReply
	(*PullUserDepositRequest)(nil),                              // 2: PullUserDepositRequest
	(*PullUserDepositReply)(nil),                                // 3: PullUserDepositReply
	(*PullUserCredentialsBscRequest)(nil),                       // 4: PullUserCredentialsBscRequest
	(*PullUserCredentialsBscReply)(nil),                         // 5: PullUserCredentialsBscReply
	(*BindTraderRequest)(nil),                                   // 6: BindTraderRequest
	(*BindTraderReply)(nil),                                     // 7: BindTraderReply
	(*AnalyzeRequest)(nil),                                      // 8: AnalyzeRequest
	(*AnalyzeReply)(nil),                                        // 9: AnalyzeReply
	(*OrderHandleRequest)(nil),                                  // 10: OrderHandleRequest
	(*OrderHandleReply)(nil),                                    // 11: OrderHandleReply
	(*ListenTraderAndUserOrderRequest)(nil),                     // 12: ListenTraderAndUserOrderRequest
	(*ListenTraderAndUserOrderReply)(nil),                       // 13: ListenTraderAndUserOrderReply
	(*ListenTraderAndUserOrderRequest_SendBody)(nil),            // 14: ListenTraderAndUserOrderRequest.SendBody
	(*ListenTraderAndUserOrderRequest_SendBody_Order)(nil),      // 15: ListenTraderAndUserOrderRequest.SendBody.Order
	(*ListenTraderAndUserOrderRequest_SendBody_Order_Data)(nil), // 16: ListenTraderAndUserOrderRequest.SendBody.Order.Data
}
var file_api_binanceexchange_user_v1_binanceexchange_user_proto_depIdxs = []int32{
	14, // 0: ListenTraderAndUserOrderRequest.send_body:type_name -> ListenTraderAndUserOrderRequest.SendBody
	15, // 1: ListenTraderAndUserOrderRequest.SendBody.orders:type_name -> ListenTraderAndUserOrderRequest.SendBody.Order
	16, // 2: ListenTraderAndUserOrderRequest.SendBody.Order.data:type_name -> ListenTraderAndUserOrderRequest.SendBody.Order.Data
	0,  // 3: BinanceUser.GetUser:input_type -> GetUserRequest
	2,  // 4: BinanceUser.PullUserDeposit:input_type -> PullUserDepositRequest
	2,  // 5: BinanceUser.PullUserDeposit2:input_type -> PullUserDepositRequest
	4,  // 6: BinanceUser.PullUserCredentialsBsc:input_type -> PullUserCredentialsBscRequest
	6,  // 7: BinanceUser.BindTrader:input_type -> BindTraderRequest
	12, // 8: BinanceUser.ListenTraderAndUserOrder:input_type -> ListenTraderAndUserOrderRequest
	10, // 9: BinanceUser.OrderHandle:input_type -> OrderHandleRequest
	8,  // 10: BinanceUser.Analyze:input_type -> AnalyzeRequest
	1,  // 11: BinanceUser.GetUser:output_type -> GetUserReply
	3,  // 12: BinanceUser.PullUserDeposit:output_type -> PullUserDepositReply
	3,  // 13: BinanceUser.PullUserDeposit2:output_type -> PullUserDepositReply
	5,  // 14: BinanceUser.PullUserCredentialsBsc:output_type -> PullUserCredentialsBscReply
	7,  // 15: BinanceUser.BindTrader:output_type -> BindTraderReply
	13, // 16: BinanceUser.ListenTraderAndUserOrder:output_type -> ListenTraderAndUserOrderReply
	11, // 17: BinanceUser.OrderHandle:output_type -> OrderHandleReply
	9,  // 18: BinanceUser.Analyze:output_type -> AnalyzeReply
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_binanceexchange_user_v1_binanceexchange_user_proto_init() }
func file_api_binanceexchange_user_v1_binanceexchange_user_proto_init() {
	if File_api_binanceexchange_user_v1_binanceexchange_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserDepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserDepositReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserCredentialsBscRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserCredentialsBscReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindTraderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindTraderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHandleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest_SendBody_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest_SendBody_Order_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_binanceexchange_user_v1_binanceexchange_user_proto_goTypes,
		DependencyIndexes: file_api_binanceexchange_user_v1_binanceexchange_user_proto_depIdxs,
		MessageInfos:      file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes,
	}.Build()
	File_api_binanceexchange_user_v1_binanceexchange_user_proto = out.File
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc = nil
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_goTypes = nil
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_depIdxs = nil
}
