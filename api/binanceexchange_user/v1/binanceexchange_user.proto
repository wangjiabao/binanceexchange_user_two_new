syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "binanceexchange_user/api/binanceexchange_user/v1;v1";
option java_multiple_files = true;
option java_package = "api.binancedata.v1";

service BinanceUser {
  rpc GetUser (GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_user"
    };
  };

  rpc PullUserDeposit (PullUserDepositRequest) returns (PullUserDepositReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_user_deposit"
    };
  };

  rpc PullUserDeposit2 (PullUserDepositRequest) returns (PullUserDepositReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_user_deposit_2"
    };
  };

  rpc PullUserCredentialsBsc (PullUserCredentialsBscRequest) returns (PullUserCredentialsBscReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_user_credentials_bsc"
    };
  };

  rpc BindTrader (BindTraderRequest) returns (BindTraderReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/bind_trader"
    };
  };

  rpc ListenTraderAndUserOrder (ListenTraderAndUserOrderRequest) returns (ListenTraderAndUserOrderReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/listen_trader_and_user_order"
      body: "*"
    };
  };

  rpc OrderHandle (OrderHandleRequest) returns (OrderHandleReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/order_handle"
    };
  };

  rpc Analyze (AnalyzeRequest) returns (AnalyzeReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/analyze"
    };
  };
}

message GetUserRequest {
  string address = 1;
}

message GetUserReply {
  int64 play = 4;
  int64 status = 1;
  int64 amount = 2;
  string balance = 3;
}

message PullUserDepositRequest {}

message PullUserDepositReply {}

message PullUserCredentialsBscRequest {}

message PullUserCredentialsBscReply {}

message BindTraderRequest {}

message BindTraderReply {}

message AnalyzeRequest {}

message AnalyzeReply {}

message OrderHandleRequest {}

message OrderHandleReply {}

message ListenTraderAndUserOrderRequest {
  message SendBody {
    repeated Order orders = 1;
    message Order {
      uint64 uid = 1;
      string base_money = 2;
      repeated Data data = 3;

      message Data {
        // Order 消息类型的字段
        string symbol = 1;
        string type = 2;
        string price = 3;
        string side = 4;
        string qty = 5;
      }
    }
  }

  SendBody send_body = 1;
}

message ListenTraderAndUserOrderReply {
  string status = 1;
}
